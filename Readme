SIT737 9.1P – Detailed Documentation

Objective

The goal of this assignment is to integrate a MongoDB database into a containerized Node.js microservice deployed on a Kubernetes cluster. The configuration includes using Kubernetes objects like ConfigMaps, Secrets, Persistent Volumes, StatefulSets, and Services to provision a resilient and scalable MongoDB deployment.

Tools Used

- Node.js – Backend microservice using JavaScript  
- MongoDB (v4.0.8) – NoSQL database  
- Kubernetes – Orchestration platform for managing containerized workloads  
- Docker – For containerization  
- kubectl – CLI for interacting with Kubernetes  
- Minikube – Local Kubernetes cluster for testing  
- GitHub – Version control and submission


Project File Overview

| File Name                 | Purpose                                                     |
|--------------------------|-------------------------------------------------------------|
| `createStatefulSet.yaml` | Defines a 3-node MongoDB replica set using StatefulSet       |
| `createHeadlessService.yaml` | Creates a headless service for MongoDB node discovery   |
| `createConfigMap.yaml`   | Supplies MongoDB configuration including replica set name    |
| `createMongoDBSecret.yaml` | Securely stores MongoDB credentials                        |
| `hostpath-storageclass.yaml` | Defines a manual hostPath-based storage class           |
| `ReplicaSetCommand.txt`  | Mongo shell command to initiate the replica set              |
| `package.json` / `package-lock.json` | Dependencies for connecting Node.js app to MongoDB |

---

Setup Process

Step 1: Create Kubernetes Secret  
Stores MongoDB root user credentials:

kubectl apply -f createMongoDBSecret.yaml


Step 2: Apply ConfigMap

Provides the MongoDB configuration file:

bash
kubectl apply -f createConfigMap.yaml


Step 3: Apply Headless Service

Enables stable DNS-based communication between MongoDB pods:

bash
kubectl apply -f createHeadlessService.yaml


Step 4: Apply StorageClass (if using hostPath)

Optional: needed only if PVCs use the hostpath class:

bash
kubectl apply -f hostpath-storageclass.yaml


Step 5: Deploy MongoDB ReplicaSet

Creates the 3 replica pods and PVCs:


kubectl apply -f createStatefulSet.yaml

Replica Set Initialization

After the MongoDB pods are running, exec into mongo-0:


kubectl exec -it mongo-0 -- mongo


Then initialize the replica set:


rs.initiate({
  _id: "rs0",
  members: [
    { _id: 0, host : "abc-0.abc.default.svc.cluster.local:27017" },
    { _id: 1, host : "abc-1.abc.default.svc.cluster.local:27017" },
    { _id: 2, host : "abc-2.abc.default.svc.cluster.local:27017" }
  ]
})



Verification

Check replica set status:

kubectl exec -it mongo-0 -- mongo --eval "rs.status()"

Try basic CRUD:


db.users.insertOne({name: "Alice",age: 25,email: "alice@example.com",status: "active"});
db.users.find({ status: "active" });
db.users.updateOne({ name: "Alice" },{ $set: { age: 26 } });
db.users.deleteOne({ name: "Charlie" });

Backup and Monitoring

* Backup: Use `mongodump` and `mongorestore` for export/import.
* Monitoring Tools: `mongotop`, `mongostat`, or Prometheus exporters for monitoring performance.

---

Cleanup Commands


kubectl delete -f createStatefulSet.yaml
kubectl delete -f createHeadlessService.yaml
kubectl delete -f createMongoDBSecret.yaml
kubectl delete -f createConfigMap.yaml
kubectl delete pvc -l app=mongo


Author & Submission

* Course: SIT737 – Cloud Native Application Development
* Assignment: 9.1P – Adding a database to your application
* Student Name: Arjun Bhaskar
* Repository: https://github.com/Arjun-Bhaskar/sit323-737-2024-t1-prac7p
